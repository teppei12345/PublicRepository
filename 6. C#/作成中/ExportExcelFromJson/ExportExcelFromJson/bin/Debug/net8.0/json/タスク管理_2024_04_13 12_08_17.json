{
  "HeaderInfo": {
    "AssemblyVersion": "1.4.1.1",
    "BaseSiteId": 11267690,
    "Server": "https://pleasanter.net/fs",
    "CreatorName": "浦田 哲平",
    "PackageTime": "2024-04-13T03:08:10.3132069+00:00",
    "Convertors": [
      {
        "SiteId": 11267690,
        "SiteTitle": "タスク管理",
        "ReferenceType": "Sites",
        "IncludeData": false,
        "Order": "[]"
      },
      {
        "SiteId": 11267727,
        "SiteTitle": "SI案件",
        "ReferenceType": "Sites",
        "IncludeData": false,
        "Order": "[11267730,11267729,0,0]"
      },
      {
        "SiteId": 11267728,
        "SiteTitle": "KPTテーブル",
        "ReferenceType": "Results",
        "IncludeData": false
      },
      {
        "SiteId": 11267729,
        "SiteTitle": "サブタスク管理テーブル",
        "ReferenceType": "Issues",
        "IncludeData": false
      },
      {
        "SiteId": 11267730,
        "SiteTitle": "メインタスク管理テーブル",
        "ReferenceType": "Issues",
        "IncludeData": false
      },
      {
        "SiteId": 11269012,
        "SiteTitle": "社内業務",
        "ReferenceType": "Sites",
        "IncludeData": false,
        "Order": "[11269015,11269014,0,0]"
      },
      {
        "SiteId": 11269013,
        "SiteTitle": "KPTテーブル",
        "ReferenceType": "Results",
        "IncludeData": false
      },
      {
        "SiteId": 11269014,
        "SiteTitle": "サブタスク管理テーブル",
        "ReferenceType": "Issues",
        "IncludeData": false
      },
      {
        "SiteId": 11269015,
        "SiteTitle": "メインタスク管理テーブル",
        "ReferenceType": "Issues",
        "IncludeData": false
      }
    ],
    "IncludeSitePermission": true,
    "IncludeRecordPermission": true,
    "IncludeColumnPermission": true,
    "IncludeNotifications": true,
    "IncludeReminders": true
  },
  "Sites": [
    {
      "TenantId": 1,
      "SiteId": 11267690,
      "Title": "タスク管理",
      "SiteName": "",
      "SiteGroupName": "",
      "Body": "",
      "GridGuide": "",
      "EditorGuide": "",
      "CalendarGuide": "",
      "CrosstabGuide": "",
      "GanttGuide": "",
      "BurnDownGuide": "",
      "TimeSeriesGuide": "",
      "AnalyGuide": "",
      "KambanGuide": "",
      "ImageLibGuide": "",
      "ReferenceType": "Sites",
      "ParentId": 10928175,
      "InheritPermission": 11267690,
      "SiteSettings": {
        "Version": 1.017,
        "ReferenceType": "Sites",
        "Styles": [
          {
            "Title": "背景色",
            "All": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          }
        ],
        "NoDisplayIfReadOnly": false
      },
      "Publish": false,
      "DisableCrossSearch": false,
      "Comments": []
    },
    {
      "TenantId": 1,
      "SiteId": 11267727,
      "Title": "SI案件",
      "SiteName": "",
      "SiteGroupName": "",
      "Body": "",
      "GridGuide": "",
      "EditorGuide": "",
      "CalendarGuide": "",
      "CrosstabGuide": "",
      "GanttGuide": "",
      "BurnDownGuide": "",
      "TimeSeriesGuide": "",
      "AnalyGuide": "",
      "KambanGuide": "",
      "ImageLibGuide": "",
      "ReferenceType": "Sites",
      "ParentId": 11267690,
      "InheritPermission": 11267690,
      "SiteSettings": {
        "Version": 1.017,
        "ReferenceType": "Sites",
        "Styles": [
          {
            "Title": "背景色",
            "All": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          }
        ],
        "Scripts": [
          {
            "Title": "背景色",
            "All": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          }
        ],
        "NoDisplayIfReadOnly": false
      },
      "Publish": false,
      "DisableCrossSearch": false,
      "Comments": []
    },
    {
      "TenantId": 1,
      "SiteId": 11267728,
      "Title": "KPTテーブル",
      "SiteName": "",
      "SiteGroupName": "KPTテーブル",
      "Body": "",
      "GridGuide": "",
      "EditorGuide": "",
      "CalendarGuide": "",
      "CrosstabGuide": "",
      "GanttGuide": "",
      "BurnDownGuide": "",
      "TimeSeriesGuide": "",
      "AnalyGuide": "",
      "KambanGuide": "",
      "ImageLibGuide": "",
      "ReferenceType": "Results",
      "ParentId": 11267727,
      "InheritPermission": 11267690,
      "SiteSettings": {
        "Version": 1.017,
        "ReferenceType": "Results",
        "GridColumns": [
          "ResultId",
          "ClassH",
          "Status",
          "DescriptionA",
          "DescriptionB",
          "DescriptionC",
          "ClassA",
          "ClassB"
        ],
        "EditorColumnHash": {
          "General": [
            "ClassC",
            "ClassE",
            "ClassD",
            "ClassH",
            "DescriptionA",
            "DescriptionB",
            "DescriptionC",
            "AttachmentsA",
            "Status",
            "ClassA",
            "ClassB"
          ]
        },
        "LinkColumns": [
          "ClassH",
          "Status",
          "DescriptionA",
          "DescriptionB",
          "DescriptionC"
        ],
        "Columns": [
          {
            "ColumnName": "Title",
            "ValidateRequired": false
          },
          {
            "ColumnName": "ClassA",
            "LabelText": "キーワード",
            "ExtendedHtmlAfterControl": "<button onclick=\"window.open(`https://www.google.com/search?q=${$p.getControl('ClassA').val()}`,'_blank');\"\nclass=\"button-icon\"\nstyle=\"position:absolute;left:343px;margin-top:2px;\"\ndata-icon=\"ul-icon-search\">\n    検索\n</button>"
          },
          {
            "ColumnName": "ClassB",
            "LabelText": "参考リンク"
          },
          {
            "ColumnName": "DescriptionA",
            "LabelText": "K(Keep)",
            "Description": "できたことや継続することを入力してください。",
            "InputGuide": "できたことや継続することを入力してください。"
          },
          {
            "ColumnName": "DescriptionB",
            "LabelText": "P(Problem)",
            "Description": "改善するべき問題点を入力してください。",
            "InputGuide": "改善するべき問題点を入力してください。"
          },
          {
            "ColumnName": "DescriptionC",
            "LabelText": "T(Try)",
            "Description": "今後挑戦したいことを入力してください。",
            "InputGuide": "今後挑戦したいことを入力してください。"
          },
          {
            "ColumnName": "ClassC",
            "LabelText": "メインタスクID",
            "ChoicesText": "[[11267730]]",
            "EditorReadOnly": true,
            "Link": true,
            "SearchType": "PartialMatch"
          },
          {
            "ColumnName": "ClassD",
            "LabelText": "サブタスク名",
            "ChoicesText": "[\r\n  {\r\n    \"SiteId\": 11267729,\r\n    \"View\": {\r\n      \"ColumnFilterExpressions\": {\r\n        \"ClassA\": \"[@ClassC]\"\r\n      }\r\n    }\r\n  }\r\n]",
            "SearchType": "PartialMatch"
          },
          {
            "ColumnName": "ClassE",
            "LabelText": "タスク明細ID",
            "AutoNumberingFormat": "[ClassC][NNNN]",
            "AutoNumberingResetType": "String",
            "EditorReadOnly": true
          },
          {
            "ColumnName": "ClassF",
            "LabelText": "メインタスク名",
            "FieldCss": "field-wide"
          },
          {
            "ColumnName": "ClassG",
            "LabelText": "サブタスク名"
          },
          {
            "ColumnName": "ClassH",
            "LabelText": "タイトル",
            "NoWrap": true,
            "EditorReadOnly": true,
            "FieldCss": "field-wide"
          },
          {
            "ColumnName": "Status",
            "ChoicesText": "100,未着手,未,status-new\n900,完了,完,status-closed\n910,保留,留,status-rejected"
          }
        ],
        "Links": [
          {
            "ColumnName": "ClassC",
            "SiteId": 11267730
          },
          {
            "ColumnName": "ClassD",
            "SiteId": 11267729,
            "View": {
              "Id": 0,
              "ColumnFilterExpressions": {
                "ClassA": "[@ClassC]"
              },
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "JsonFormat": true
          }
        ],
        "Processes": [
          {
            "Id": 1,
            "Name": "削除",
            "DisplayName": "削除",
            "CurrentStatus": -1,
            "ChangedStatus": -1,
            "OnClick": "$p.ex.execDeleteRecord();",
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          }
        ],
        "Styles": [
          {
            "Title": "背景色",
            "New": true,
            "Edit": true,
            "Index": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          },
          {
            "Title": "「新バージョンとして保存」を非表示にする",
            "New": true,
            "Edit": true,
            "Body": "#VerUp, label[for='VerUp'] {\n    display: none;\n}\n#LinkCreations {\n    display: none;\n}",
            "Id": 2
          }
        ],
        "Scripts": [
          {
            "Title": "ボタンクリック時のレコード削除イベント",
            "Index": true,
            "Body": "// クライアントスクリプト\ntry {\n    // my-row-buttonがクリックされたときのイベント\n    $(document).on('click', '.my-row-button', function (event) {\n        // レコードのIDをコンソールに出力\n        $p.apiDelete({\n        id: $(this).data('id'),\n        done: function (data) {\n            location.reload();\n        }\n    });\n        // 編集画面が開かないようにイベントの伝搬を停止\n        event.stopImmediatePropagation();\n    });\n} catch (ex) {\n    console.log(ex.stack)\n}",
            "Id": 2
          },
          {
            "Title": "レコードを削除する",
            "Edit": true,
            "Body": "$p.ex.execDeleteRecord = function () {\n    const siteId = 0;\n    try {\n        // レコードのIDをコンソールに出力\n        $p.apiDelete({\n            id: $p.id(),\n            done: function (data) {\n                window.location.href = 'https://pleasanter.net/fs/items/' + siteId + '/index'\n            }\n        });\n    } catch (ex) {\n        console.log(ex.stack)\n    }\n}",
            "Id": 4
          },
          {
            "Title": "編集画面設定用($p.events.on_editor_load)",
            "Edit": true,
            "Body": "$p.events.on_editor_load = function () {\n    // 常に新バージョンとして保存をオン\n    let verup = $(\"#VerUp\");\n    verup.prop('checked', true);\n\n    // リンクボタンの表示\n    $('#Results_ClassBField').after('<button type=\"button\" style=\"display:block;float:left;height:30px;padding:7px 12px;border:solid 1px silver;background-color:white;\" onclick=\"Transition()\">リンク</button>');\n};\nfunction Transition() {\n    open($p.getControl('ClassB').val());\n}",
            "Id": 5
          },
          {
            "Title": "一覧画面($p.events.on_grid_load)",
            "Index": true,
            "Body": "$p.events.on_grid_load = function () {\n    // リンク列にリンクを設定\n    let table = document.getElementById('Grid');\n    let colNum = $p.getGridColumnIndex('ClassB');\n    for (let row of table.rows) {\n        console.log(row.className);\n        if (row.className === 'grid-row') {\n            let urlText = row.cells[colNum].textContent;\n            const a1 = document.createElement(\"a\");\n            a1.href = urlText;\n            a1.target = \"_blank\";\n            a1.innerText = urlText;\n            row.cells[colNum].textContent = \"\";\n            row.cells[colNum].appendChild(a1);\n        }\n    }\n}",
            "Id": 6
          }
        ],
        "ServerScripts": [
          {
            "Title": "一覧画面の行に削除ボタンを配置",
            "Name": "",
            "BeforeOpeningRow": true,
            "Body": "// サーバスクリプト\ntry {\n    // 「data-id=\"${model.ResultId}\"」でボタンを表示する行を指定\n    let html = `<button data-id=\"${model.ResultId}\"class=\"button-icon my-row-button\"data-icon=\"ui-icon-circle-triangle-e\">削除</button>`;\n    // 該当業のClassA列に「削除」ボタンを表示\n    columns.ClassA.RawText = html;\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 1
          },
          {
            "Title": "新規・編集画面にある標準の削除・コピー・メールボタンを非表示にする",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "    elements.DisplayType('DeleteCommand', 3);  // 削除\n    elements.DisplayType('OpenCopyDialogCommand', 3);  // コピー\n    elements.DisplayType('EditOutgoingMail', 3);  // メール",
            "Id": 2
          },
          {
            "Title": "一覧画面の一括削除・インポート・エクスポートボタンを非表示にする",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "// 一覧画面\nif (context.Action === 'index') {\n    elements.DisplayType('BulkDeleteCommand', 3);  // 一括削除\n    elements.DisplayType('EditImportSettings', 3);  // インポート\n    elements.DisplayType('OpenExportSelectorDialogCommand', 3);  // エクスポート\n}",
            "Id": 3
          },
          {
            "Title": "メインタスク名に親レコードから取得したメインタスク名を設定する",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "/*\nロジック内で使用する値初期化箇所\nユーザによる要修正箇所\n*/\n// メインタスク管理テーブルテンプレートのサイトIDを設定\nlet MainSiteId = 11267730;\n// サブタスク管理テーブルテンプレートのサイトIDを設定\nlet subSiteId = 11267729;\n\n/*\nロジック内で使用する値初期化箇所\nユーザによる修正不要箇所\n*/\n// 「メインタスクID」項目の値を設定\nlet mainRecordId = model.ClassC;\n// 「サブタスク名」項目の値を設定\nlet subRecordId = model.ClassD;\n// レコード取得条件設定する変数を初期化\nlet data;\nlet ClassH;\n\n/*\nロジック箇所\nユーザによる修正不要箇所\n*/\n// メインタスクのレコード取得条件を設定\ndata = {\n    View: {\n        ColumnFilterHash: {\n            // 「タスクID」項目：メインタスクのサイトID\n            IssueId: mainRecordId,\n        },\n    },\n};\n// レコードの情報を取得\nlet mainResults = items.Get(MainSiteId, JSON.stringify(data));\n// レコード数分反復\nfor (let result of mainResults) {\n    // 「メインタスク名」項目にメインタスク名を設定\n    model.ClassF = result.ClassA;\n    ClassH = result.ClassA;\n}\n\nif (subRecordId) {\n    // メインタスクのレコード取得条件を設定\n    data = {\n        View: {\n            ColumnFilterHash: {\n                // 「タスクID」項目：サブタスクのサイトID\n                IssueId: subRecordId,\n            },\n        },\n    };\n    // レコードの情報を取得\n    let subResults = items.Get(subSiteId, JSON.stringify(data));\n    // レコード数分反復\n    for (let result of subResults) {\n        // 「サブタスク名」項目にサブタスク名を設定\n        model.ClassG = result.Title;\n        model.ClassH = ClassH + ' - ' + result.Title;\n    }\n} else {\n    model.ClassH = ClassH;\n}\n",
            "Id": 4
          }
        ],
        "NoDisplayIfReadOnly": false
      },
      "Publish": false,
      "DisableCrossSearch": false,
      "Comments": []
    },
    {
      "TenantId": 1,
      "SiteId": 11267729,
      "Title": "サブタスク管理テーブル",
      "SiteName": "",
      "SiteGroupName": "サブタスク管理テーブル",
      "Body": "",
      "GridGuide": "",
      "EditorGuide": "",
      "CalendarGuide": "",
      "CrosstabGuide": "",
      "GanttGuide": "",
      "BurnDownGuide": "",
      "TimeSeriesGuide": "",
      "AnalyGuide": "",
      "KambanGuide": "",
      "ImageLibGuide": "",
      "ReferenceType": "Issues",
      "ParentId": 11267727,
      "InheritPermission": 11267690,
      "SiteSettings": {
        "Version": 1.017,
        "ReferenceType": "Issues",
        "GridView": 3,
        "LinkTableView": 1,
        "GridColumns": [
          "ClassA",
          "ClassB",
          "Title",
          "StartTime",
          "CompletionTime"
        ],
        "EditorColumnHash": {
          "General": [
            "ClassA",
            "ClassB",
            "_Section-1",
            "ClassD",
            "Title",
            "Body",
            "DescriptionA",
            "AttachmentsA",
            "_Section-2",
            "StartTime",
            "CompletionTime",
            "NumC",
            "_Section-3",
            "DateA",
            "DateB",
            "Status",
            "CheckA",
            "_Section-4",
            "NumA",
            "NumB",
            "ClassC"
          ]
        },
        "SectionLatestId": 4,
        "Sections": [
          {
            "Id": 1,
            "LabelText": "作業内容",
            "AllowExpand": true,
            "Expand": true
          },
          {
            "Id": 2,
            "LabelText": "予定",
            "AllowExpand": true,
            "Expand": true
          },
          {
            "Id": 3,
            "LabelText": "実作業",
            "AllowExpand": true,
            "Expand": false
          },
          {
            "Id": 4,
            "LabelText": "サマリ",
            "AllowExpand": true,
            "Expand": false
          }
        ],
        "Columns": [
          {
            "ColumnName": "StartTime",
            "LabelText": "開始予定",
            "GridFormat": "Ymdhm",
            "EditorFormat": "Ymdhm",
            "ValidateRequired": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "CompletionTime",
            "LabelText": "完了予定",
            "GridFormat": "Ymdhm",
            "EditorFormat": "Ymdhm",
            "DateTimeStep": 1
          },
          {
            "ColumnName": "ClassA",
            "LabelText": "タスクID",
            "ChoicesText": "[[11267730]]",
            "ValidateRequired": true,
            "EditorReadOnly": true,
            "Link": true,
            "SearchType": "PartialMatch"
          },
          {
            "ColumnName": "ClassB",
            "LabelText": "タスク明細ID",
            "AutoNumberingFormat": "[ClassA][NNNN]",
            "AutoNumberingResetType": "String",
            "ValidateRequired": true,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "Title",
            "LabelText": "サブタスク名"
          },
          {
            "ColumnName": "NumA",
            "LabelText": "予定工数",
            "NoWrap": true,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "NumB",
            "LabelText": "実工数",
            "DefaultInput": "0",
            "EditorReadOnly": true
          },
          {
            "ColumnName": "ClassC",
            "LabelText": "予実差",
            "DefaultInput": "0",
            "EditorReadOnly": true
          },
          {
            "ColumnName": "DateA",
            "LabelText": "開始",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "DateB",
            "LabelText": "完了",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "Status",
            "ChoicesText": "100,未着手,未,status-new\n200,実施中,実,status-inprogress\n300,レビュー,レ,status-review\n900,完了,完,status-closed\n910,保留,留,status-rejected\n920,不要,不,status-rejected",
            "ValidateRequired": false,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "NumC",
            "LabelText": "調整",
            "DefaultInput": "0"
          },
          {
            "ColumnName": "DescriptionA",
            "LabelText": "備考"
          },
          {
            "ColumnName": "AttachmentsA",
            "LabelText": "添付ファイル"
          },
          {
            "ColumnName": "ClassD",
            "LabelText": "メインタスク名",
            "EditorReadOnly": true,
            "FieldCss": "field-wide"
          },
          {
            "ColumnName": "CheckA",
            "LabelText": "不要",
            "EditorReadOnly": true
          }
        ],
        "Links": [
          {
            "ColumnName": "ClassA",
            "SiteId": 11267730
          }
        ],
        "Processes": [
          {
            "Id": 1,
            "Name": "作業開始",
            "DisplayName": "作業開始",
            "CurrentStatus": 100,
            "ChangedStatus": 200,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateA",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 3,
            "Name": "レビュー実施",
            "DisplayName": "レビュー実施",
            "CurrentStatus": 200,
            "ChangedStatus": 300,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 4,
            "Name": "完了",
            "DisplayName": "完了",
            "CurrentStatus": 300,
            "ChangedStatus": 900,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateB",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 5,
            "Name": "完了",
            "DisplayName": "完了",
            "CurrentStatus": 200,
            "ChangedStatus": 900,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateB",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 6,
            "Name": "保留",
            "DisplayName": "保留",
            "CurrentStatus": -1,
            "ChangedStatus": 910,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 7,
            "Name": "再始動",
            "DisplayName": "再始動",
            "CurrentStatus": 910,
            "ChangedStatus": 100,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 8,
            "Name": "不要",
            "DisplayName": "不要",
            "CurrentStatus": -1,
            "ChangedStatus": 920,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputValue",
                "ColumnName": "CheckA",
                "Value": "true"
              }
            ]
          }
        ],
        "ViewLatestId": 3,
        "Views": [
          {
            "Id": 1,
            "Name": "リンク",
            "GridColumns": [
              "Title",
              "Status",
              "StartTime",
              "CompletionTime",
              "NumA",
              "NumB",
              "ClassC"
            ],
            "ColumnFilterHash": {
              "Status": "[\"100\",\"200\",\"300\",\"900\",\"910\"]"
            },
            "ColumnSorterHash": {
              "StartTime": "asc"
            },
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "CalendarTimePeriod": "Monthly",
            "CalendarFromTo": "StartTime-CompletionTime",
            "CrosstabGroupByX": "StartTime",
            "CrosstabGroupByY": "Owner",
            "CrosstabAggregateType": "Total",
            "CrosstabValue": "NumA",
            "CrosstabTimePeriod": "Monthly",
            "ApiDataType": 0
          },
          {
            "Id": 2,
            "Name": "一覧",
            "ColumnSorterHash": {
              "StartTime": "asc"
            },
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "CalendarTimePeriod": "Monthly",
            "CalendarFromTo": "StartTime-CompletionTime",
            "CrosstabGroupByX": "Status",
            "CrosstabGroupByY": "Owner",
            "CrosstabAggregateType": "Total",
            "CrosstabValue": "NumA",
            "CrosstabTimePeriod": "Monthly",
            "ApiDataType": 0
          },
          {
            "Id": 3,
            "Name": "カレンダー",
            "DefaultMode": "Calendar",
            "ColumnFilterHash": {
              "Status": "[\"100\",\"200\",\"300\"]"
            },
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "CalendarTimePeriod": "Monthly",
            "CalendarFromTo": "StartTime-CompletionTime",
            "CalendarShowStatus": true,
            "CrosstabGroupByX": "Status",
            "CrosstabGroupByY": "ClassA",
            "CrosstabAggregateType": "Total",
            "CrosstabValue": "NumB",
            "CrosstabTimePeriod": "Monthly",
            "ApiDataType": 0
          }
        ],
        "Styles": [
          {
            "Title": "背景色",
            "New": true,
            "Edit": true,
            "Index": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          },
          {
            "Title": "「新バージョンとして保存」を非表示にする",
            "New": true,
            "Edit": true,
            "Body": "#VerUp, label[for='VerUp'] {\n    display: none;\n}\n#LinkCreations {\n    display: none;\n}",
            "Id": 2
          }
        ],
        "Scripts": [
          {
            "Title": "編集画面設定用($p.events.on_editor_load)",
            "New": true,
            "Edit": true,
            "Body": "$p.events.on_editor_load = function () {\n    // 常に新バージョンとして保存をオン\n    let verup = $(\"#VerUp\");\n    verup.prop('checked', true);\n};",
            "Id": 1
          },
          {
            "Title": "一覧画面($p.events.on_grid_load)",
            "Index": true,
            "Body": "$p.events.on_grid_load = function () {\n    // リンク列にリンクを設定\n    let table = document.getElementById('Grid');\n    let colNum = $p.getGridColumnIndex('ClassB');\n    for (let row of table.rows) {\n        console.log(row.className);\n        if (row.className === 'grid-row') {\n            let urlText = row.cells[colNum].textContent;\n            const a1 = document.createElement(\"a\");\n            a1.href = urlText;\n            a1.target = \"_blank\";\n            a1.innerText = urlText;\n            row.cells[colNum].textContent = \"\";\n            row.cells[colNum].appendChild(a1);\n        }\n    }\n}",
            "Id": 5
          }
        ],
        "ServerScripts": [
          {
            "Title": "完了予定日が開始予定日より過去日だった場合の分単位での制御",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "try {\n    let startTime = new Date(model.StartTime);\n    let endTime = new Date(model.CompletionTime);\n    let minutes = Math.floor((endTime- startTime) / (1000 * 60));\n    if (minutes <= 0) {\n        context.Error('完了日が不正です。');\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 1
          },
          {
            "Title": "開始予定項目と完了予定項目から予定工数を分単位で自動設定",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "try {\n    let startTime = new Date(model.StartTime);\n    let endTime = new Date(model.CompletionTime);\n    let minutes = Math.floor((endTime- startTime) / (1000 * 60));\n    model.NumA = minutes;\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 2
          },
          {
            "Title": "開始項目と完了項目から実工数項目に値を設定する",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "try {\n    if (model.DateB > 0) {\n    let start = (new Date(model.DateA)) / (1000 * 60);\n    let end = (new Date(model.DateB)) / (1000 * 60);\n    let adjustCosts = model.NumC;\n    model.NumB = end - start + adjustCosts;\n    let expectationCosts = model.NumA;\n    let actualCosts = model.NumB;\n    let differenceCosts = expectationCosts - actualCosts;\n    model.ClassC = differenceCosts;\n    } else {\n        model.NumB = 0;\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}\n",
            "Id": 3
          },
          {
            "Title": "予定工数項目と実工数項目から予実差項目に値を自動で設定する",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "try {\n    let expectationCosts = model.NumA;\n    let actualCosts = Math.round(model.NumB, 1);\n    let differenceCosts = expectationCosts - actualCosts;\n    model.ClassC = differenceCosts;\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 4
          },
          {
            "Title": "メインタスク名に親レコードから取得したメインタスク名を設定する",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "let recordId = model.ClassA;\nlet siteId = 11267730;\nlet data = {\n    View: {\n        ColumnFilterHash: {\n            IssueId: recordId,\n        }\n    }\n};\nlet results = items.Get(siteId, JSON.stringify(data));\nfor (let result of results) {\n    model.ClassD = result.ClassA;\n}\n",
            "Id": 6
          },
          {
            "Title": "新規・編集画面にある標準の削除・コピー・メールボタンを非表示にする",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "    elements.DisplayType('DeleteCommand', 3);  // 削除\n    elements.DisplayType('OpenCopyDialogCommand', 3);  // コピー\n    elements.DisplayType('EditOutgoingMail', 3);  // メール",
            "Id": 8
          },
          {
            "Title": "一覧画面の一括削除・インポート・エクスポートボタンを非表示にする",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "// 一覧画面\nif (context.Action === 'index') {\n    elements.DisplayType('BulkDeleteCommand', 3);  // 一括削除\n    elements.DisplayType('EditImportSettings', 3);  // インポート\n    elements.DisplayType('OpenExportSelectorDialogCommand', 3);  // エクスポート\n}",
            "Id": 9
          }
        ],
        "NoDisplayIfReadOnly": false
      },
      "Publish": false,
      "DisableCrossSearch": false,
      "Comments": []
    },
    {
      "TenantId": 1,
      "SiteId": 11267730,
      "Title": "メインタスク管理テーブル",
      "SiteName": "",
      "SiteGroupName": "メインタスク管理テーブル",
      "Body": "",
      "GridGuide": "",
      "EditorGuide": "",
      "CalendarGuide": "",
      "CrosstabGuide": "",
      "GanttGuide": "",
      "BurnDownGuide": "",
      "TimeSeriesGuide": "",
      "AnalyGuide": "",
      "KambanGuide": "",
      "ImageLibGuide": "",
      "ReferenceType": "Issues",
      "ParentId": 11267727,
      "InheritPermission": 11267690,
      "SiteSettings": {
        "Version": 1.017,
        "ReferenceType": "Issues",
        "GridView": 2,
        "LinkTableView": 1,
        "GridColumns": [
          "IssueId",
          "ClassA",
          "StartTime",
          "CompletionTime",
          "NumA",
          "NumB",
          "ClassB",
          "Manager"
        ],
        "EditorColumnHash": {
          "General": [
            "IssueId",
            "_Section-1",
            "ClassA",
            "Body",
            "DateC",
            "ClassD",
            "ClassC",
            "CheckA",
            "AttachmentsA",
            "_Section-2",
            "StartTime",
            "CompletionTime",
            "_Section-3",
            "DateA",
            "DateB",
            "Status",
            "_Section-4",
            "NumA",
            "NumB",
            "ClassB"
          ]
        },
        "SectionLatestId": 4,
        "Sections": [
          {
            "Id": 1,
            "LabelText": "作業内容",
            "AllowExpand": true,
            "Expand": true
          },
          {
            "Id": 2,
            "LabelText": "予定",
            "AllowExpand": true,
            "Expand": false
          },
          {
            "Id": 3,
            "LabelText": "実作業",
            "AllowExpand": true,
            "Expand": false
          },
          {
            "Id": 4,
            "LabelText": "サマリ",
            "AllowExpand": true,
            "Expand": false
          }
        ],
        "TitleColumns": [
          "Title",
          "IssueId"
        ],
        "Columns": [
          {
            "ColumnName": "StartTime",
            "LabelText": "開始予定",
            "GridFormat": "Ymdahm",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "CompletionTime",
            "LabelText": "完了予定",
            "GridFormat": "Ymdahm",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "Owner",
            "NoWrap": true,
            "ValidateRequired": true
          },
          {
            "ColumnName": "NumA",
            "LabelText": "予定工数",
            "NoWrap": true,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "NumB",
            "LabelText": "実工数",
            "EditorReadOnly": true
          },
          {
            "ColumnName": "ClassB",
            "LabelText": "予実差",
            "DefaultInput": "0",
            "ValidateRequired": true,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "IssueId",
            "LabelText": "メインタスクID"
          },
          {
            "ColumnName": "ClassA",
            "LabelText": "メインタスク",
            "NoWrap": true,
            "ValidateRequired": true,
            "FieldCss": "field-wide"
          },
          {
            "ColumnName": "Title",
            "LabelText": "メインタスクID",
            "ValidateRequired": false
          },
          {
            "ColumnName": "ClassC",
            "LabelText": "お客様環境リンク"
          },
          {
            "ColumnName": "DateA",
            "LabelText": "開始",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "DateB",
            "LabelText": "完了",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "Status",
            "ValidateRequired": false,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "Manager",
            "ValidateRequired": true
          },
          {
            "ColumnName": "AttachmentsA",
            "LabelText": "添付ファイル"
          },
          {
            "ColumnName": "DateC",
            "LabelText": "期限"
          },
          {
            "ColumnName": "ClassD",
            "LabelText": "重要度",
            "ChoicesText": "S\nA\nB\nC",
            "SearchType": "PartialMatch"
          },
          {
            "ColumnName": "CheckA",
            "LabelText": "優先フラグ"
          },
          {
            "ColumnName": "ClassE",
            "LabelText": "タスク分類",
            "DefaultInput": "SI案件",
            "EditorReadOnly": true
          }
        ],
        "Processes": [
          {
            "Id": 1,
            "Name": "作業開始",
            "DisplayName": "作業開始",
            "CurrentStatus": 150,
            "ChangedStatus": 200,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateA",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 3,
            "Name": "レビュー実施",
            "DisplayName": "レビュー実施",
            "CurrentStatus": 200,
            "ChangedStatus": 300,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 4,
            "Name": "完了",
            "DisplayName": "完了",
            "CurrentStatus": 300,
            "ChangedStatus": 900,
            "ConfirmationMessage": "お客様課題に工数を入力しましたか？",
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateB",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 5,
            "Name": "完了",
            "DisplayName": "完了",
            "CurrentStatus": 200,
            "ChangedStatus": 900,
            "ConfirmationMessage": "お客様課題に工数を入力しましたか？",
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateB",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 6,
            "Name": "保留",
            "DisplayName": "保留",
            "CurrentStatus": -1,
            "ChangedStatus": 910,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 7,
            "Name": "準備",
            "DisplayName": "準備",
            "ScreenType": 10,
            "CurrentStatus": 100,
            "ChangedStatus": 150,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 8,
            "Name": "工数集計",
            "DisplayName": "工数集計",
            "CurrentStatus": -1,
            "ChangedStatus": -1,
            "AllowBulkProcessing": true,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          }
        ],
        "ViewLatestId": 2,
        "Views": [
          {
            "Id": 1,
            "Name": "リンク",
            "GridColumns": [
              "IssueId",
              "ClassA",
              "Status",
              "StartTime",
              "CompletionTime",
              "NumA",
              "NumB",
              "ClassB",
              "Manager"
            ],
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "CalendarTimePeriod": "Monthly",
            "CalendarFromTo": "StartTime-CompletionTime",
            "CrosstabGroupByX": "Status",
            "CrosstabGroupByY": "Status",
            "CrosstabAggregateType": "Total",
            "CrosstabValue": "NumA",
            "CrosstabTimePeriod": "Monthly",
            "ApiDataType": 0
          },
          {
            "Id": 2,
            "Name": "一覧",
            "DefaultMode": "Index",
            "GridColumns": [
              "IssueId",
              "ClassA",
              "Status",
              "StartTime",
              "CompletionTime",
              "DateA",
              "DateB",
              "DateC",
              "ClassD",
              "CheckA",
              "NumA",
              "NumB",
              "ClassB",
              "ClassC"
            ],
            "ColumnFilterHash": {
              "Status": "[\"100\",\"150\",\"200\",\"300\",\"910\"]"
            },
            "ColumnSorterHash": {
              "DateC": "asc",
              "CheckA": "desc",
              "ClassD": "asc",
              "Status": "asc"
            },
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "CalendarTimePeriod": "Monthly",
            "CalendarFromTo": "StartTime-CompletionTime",
            "CrosstabGroupByX": "Status",
            "CrosstabGroupByY": "Status",
            "CrosstabAggregateType": "Total",
            "CrosstabValue": "NumA",
            "CrosstabTimePeriod": "Monthly",
            "ApiDataType": 0
          }
        ],
        "Styles": [
          {
            "Title": "背景色",
            "New": true,
            "Edit": true,
            "Index": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          },
          {
            "Title": "「新バージョンとして保存」を非表示にする",
            "New": true,
            "Edit": true,
            "Body": "#VerUp, label[for='VerUp'] {\n    display: none;\n}",
            "Id": 2
          }
        ],
        "Scripts": [
          {
            "Title": "編集画面設定用($p.events.on_editor_load)",
            "New": true,
            "Edit": true,
            "Body": "$p.events.on_editor_load = function () {\n    // 常に新バージョンとして保存をオン\n    let verup = $(\"#VerUp\");\n    verup.prop('checked', true);\n\n    // リンクボタンの表示\n    $('#Issues_ClassCField').after('<button type=\"button\" style=\"display:block;float:left;height:30px;padding:7px 12px;border:solid 1px silver;background-color:white;\" onclick=\"Transition()\">リンク</button>');\n};\nfunction Transition() {\n    open($p.getControl('ClassC').val());\n}",
            "Id": 1
          }
        ],
        "ServerScripts": [
          {
            "Title": "子テーブルから情報を取得する",
            "Name": "",
            "BeforeUpdate": true,
            "Body": "try {\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる要修正箇所\n    */\n    // サブタスク管理テーブルテンプレートのサイトIDを設定\n    const siteId = 11267729;\n\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる修正不要箇所\n    */\n    // メインタスクIDを設定\n    const mainTaskId = model.IssueId;\n    // 予定工数を計上する変数を初期化\n    let expectationCosts = 0;\n    // 実工数を計上する変数を初期化\n    let actualCosts = 0;\n    // 予実差を計上する変数を初期化\n    let differenceCosts = 0;\n    // 開始予定を設定する変数を初期化\n    let expectationStartTimes = new Array();\n    // 完了予定を設定する変数を初期化\n    let expectationEndTimes = new Array();\n    // 最も新しい開始予定を設定する変数を初期化\n    let firstStartTime = new Date();\n    // 最も古い終了予定を設定する変数を初期化\n    let lastEndTime = firstStartTime.getMinutes() + 1;\n    // 子レコードの取得条件を設定\n    let data = {\n        View: {\n            ColumnFilterHash: {\n                // 「タスクID」項目：メインタスクのサイトID\n                ClassA: '[' + mainTaskId + ']',\n                // 「不要」項目：チャックされていない\n                CheckA: false,\n            },\n        },\n    };\n\n    /*\n    各ロジック呼び出し制御箇所\n    ユーザによる修正不要箇所\n    */\n    // リンクされている子レコードの情報を取得\n    let sites = items.Get(siteId, JSON.stringify(data));\n    // 子レコードが存在している場合\n    if (sites) {\n        // レコード数分反復\n        for (let site of sites) {\n            // 予定工数と実工数の値を取得\n            calculateCost(site);\n            // 開始予定と終了予定の値を取得\n            getTime(site);\n        }\n        // 集計した予定工数と実工数から予実差を計算し、値を設定\n        setCost();\n        // 開始予定から値を設定\n        setExpectationStartTime();\n        // 終了予定から値を設定\n        setExpectationEndTime();\n        // 子レコードが存在していない場合\n    } else {\n        // 「予実差」項目に「0」を設定\n        model.ClassB = 0;\n    }\n\n    /*\n    ロジック箇所\n    ユーザによる修正不要箇所\n    */\n    // 予定工数と実工数の値を取得\n    function calculateCost(site) {\n        expectationCosts += site.NumA;\n        actualCosts += site.NumB;\n    }\n    // 開始予定と終了予定の値を取得\n    function getTime(site) {\n        expectationStartTimes.push(site.StartTime);\n        expectationEndTimes.push(site.CompletionTime);\n    }\n    // 取得した予定工数と実工数から予実差を計算し、それぞれ値を設定\n    function setCost() {\n        differenceCosts = expectationCosts - actualCosts;\n        // 「予定工数」項目に値を設定\n        model.NumA = expectationCosts;\n        // 「実工数」項目に値を設定\n        model.NumB = actualCosts;\n        // 「予実差」項目に値を設定\n        model.ClassB = differenceCosts;\n    }\n    // 開始予定から値を設定する\n    function setExpectationStartTime() {\n        // 配列「expectationStartTimes」の値を設定する変数の初期化\n        let tmp;\n        // 反復処理回数をカウントする変数の初期化\n        let count = 1;\n        // 配列「expectationStartTimes」にデータが存在している場合\n        if (expectationStartTimes) {\n            // 配列「expectationStartTimes」のデータ数分反復\n            for (let expectationStartTime of expectationStartTimes) {\n                // 1回目の処理\n                if (count === 1) {\n                    // 日付オブジェクトに変換した変数「expectationStartTime」の値を変数「firstStartTime」に設定\n                    firstStartTime = new Date(expectationStartTime);\n                } else {\n                    // 日付オブジェクトに変換した変数「expectationStartTime」の値を変数「tmp」に設定\n                    tmp = new Date(expectationStartTime);\n                    // 変数「tmp」が変数「firstStartTime」よりも小さい(前)だった場合\n                    if (tmp < firstStartTime) {\n                        // 変数「firstStartTime」に変数[tmp]を設定\n                        firstStartTime = tmp;\n                    }\n                }\n                // インクリメント\n                count++;\n            }\n            // 最終的に最も小さい(前の)値を「開始予定」項目に設定\n            model.StartTime = firstStartTime;\n            // 配列「expectationStartTimes」にデータが存在していない場合\n        } else {\n            // 今の日時を「開始予定」項目に設定\n            model.StartTime = firstStartTime;\n        }\n    }\n    // 終了予定から値を設定\n    function setExpectationEndTime() {\n        let tmp;\n        let count = 1;\n        if (expectationEndTimes.length !== 0) {\n            for (let expectationEndTime of expectationEndTimes) {\n                if (count === 1) {\n                    lastEndTime = new Date(expectationEndTime);\n                } else {\n                    tmp = new Date(expectationEndTime);\n                    // 変数「tmp」が変数「firstStartTime」よりも大きい(後)だった場合\n                    if (tmp > lastEndTime) {\n                        lastEndTime = tmp;\n                    }\n                }\n                count++;\n            }\n            lastEndTime.setHours(lastEndTime.getHours() + 9);\n            model.CompletionTime = lastEndTime;\n        }\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}\n",
            "Id": 1
          },
          {
            "Title": "標準ボタンを非表示",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "try {\n    elements.DisplayType('CreateCommand', 1);\n    elements.DisplayType('OpenCopyDialogCommand', 1);\n    elements.DisplayType('EditOutgoingMail', 1);\n    elements.DisplayType('DeleteCommand', 1);\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 3
          },
          {
            "Title": "一覧画面の一括削除・インポート・エクスポートボタンを非表示にする",
            "Name": "",
            "Body": "// 一覧画面\nif (context.Action === 'index') {\n    elements.DisplayType('BulkDeleteCommand', 3);  // 一括削除\n    elements.DisplayType('EditImportSettings', 3);  // インポート\n    elements.DisplayType('OpenExportSelectorDialogCommand', 3);  // エクスポート\n}",
            "Id": 5
          },
          {
            "Title": "工数集計処理①",
            "Name": "",
            "AfterUpdate": true,
            "Body": "try {\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる要修正箇所\n    */\n    // 工数集計対象年を設定する定数を初期化\n    const calcYear = 2024;\n    // 工数集計対象月を設定する定数を初期化\n    const calcMonth = 4;\n    // サブタスク管理テーブルのサイトIDを設定\n    const siteId = 11267729;\n\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる修正不要箇所\n    */\n    // 工数集計対象の開始年月日を設定する変数を初期化\n    let startCalcDate;\n    // 工数集計対象の終了年月日を設定する変数を初期化\n    let endCalcDate;\n    // 今月末日を設定する定数を初期化\n    const thisMonthLastDate = new Date(calcYear, calcMonth, 0);\n    // 取得するサイト情報の条件を設定する変数を初期化\n    let data;\n    // メインタスクIDを設定\n    const mainTaskId = model.IssueId;\n    // メインタスクごとに集計する各工数の変数を初期化；\n    // レコード単位の予定工数\n    let recordExpectationCost;\n    // レコード単位の実工数\n    let recordActualCost;\n    // レコード単位の予実差\n    let recordDifferenceCost;\n    // 開始予定時間\n    let startDate;\n    // 完了予定時間\n    let endDate;\n    // サブタスクのタイトルと作業日時\n    let subTaskInfo = [];\n    // 開始予定\n    let subTaskStartDate;\n    // 完了予定\n    let subTaskEndDate;\n    // 時間\n    let time;\n    // 分\n    let minutes;\n\n    /*\n    ロジック箇所\n    ユーザによる修正不要箇所\n    */\n    // 一覧画面にて\n    if (context.ControlId === 'BulkProcessCommand') {\n        // 当月1日の「00:00:00」を設定\n        startCalcDate = calcYear + '/' + calcMonth + '/' + '1 00:00:00';\n        // 当月末日の「23:59:59」を設定\n        endCalcDate = thisMonthLastDate.toLocaleDateString() + ' 23:59:59';\n        // 子レコードの取得条件を設定\n        data = {\n            View: {\n                ColumnFilterHash: {\n                    // 「タスクID」項目：メインタスクのサイトID\n                    ClassA: '[' + mainTaskId + ']',\n                    // 「不要」項目：チャックされていない\n                    CheckA: false,\n                    // 「開始予定」項目：当月1日の「00:00:00」以降\n                    StartTime: \"['\" + startCalcDate + \",']\",\n                    // 「完了予定」項目：当月末日の「23:59:59」以前\n                    CompletionTime: \"[',\" + endCalcDate + \"']\",\n                },\n                ColumnSorterHash:{\n                    StartTime: \"asc\"\n                }\n            }\n        };\n        // 変数「context.UserData.expectationCost」に値が設定されていない場合\n        if (!context.UserData.expectationCost) context.UserData.expectationCost = 0;\n        // 変数「context.UserData.actualCost」に値が設定されていない場合\n        if (!context.UserData.actualCost) context.UserData.actualCost = 0;\n        // 変数「context.UserData.differenceCost」に値が設定されていない場合\n        if (!context.UserData.differenceCost) context.UserData.differenceCost = 0;\n        // 子レコードの情報を取得\n        let sites = items.Get(siteId, JSON.stringify(data));\n        recordExpectationCost = 0;\n        recordActualCost = 0;\n        recordDifferenceCost = 0;\n        // 子レコードが存在している場合\n        if (sites) {\n            // レコード数分反復\n            for (let site of sites) {\n                // 予定工数と実工数を計上\n                calculateCost(site);\n            }\n            // 今月予定しているサブタスクがある場合\n            if (recordExpectationCost > 0) {\n                // 日付オブジェクトに変換した「開始予定」項目の値を設定\n                startDate = new Date(model.StartTime);\n                // 変数「startDate」から年月日を設定\n                startDate = startDate.getFullYear() + '/' + (startDate.getMonth() + 1) + '/' + startDate.getDate();\n                // 日付オブジェクトに変換した「完了予定」項目の値を設定\n                endDate = new Date(model.CompletionTime);\n                // 変数「endDate」から年月日を設定\n                endDate = endDate.getFullYear() + '/' + (endDate.getMonth() + 1) + '/' + endDate.getDate();\n                // 各タスクの工数をコンソールに出力\n                context.Log('--------------------------------');\n                context.Log('タスク名：' + model.ClassA);\n                context.Log('タスク着手期間：' + startDate + '～' + endDate);\n                // サブタスクの「サブタスク名」項目・「状況」・「着手日時」をサブタスクごとに表示\n                subTaskInfo.map((subTaskInfo) => context.Log( subTaskInfo.Name + '(' + subTaskInfo.Status + ')：' + subTaskInfo.Time + '(' + subTaskInfo.minute + '分)' ));\n                context.Log('予定工数：' + recordExpectationCost + '分, 実工数：' + recordActualCost + '分, 予実差：' + recordDifferenceCost + '分' );\n                // メインタスクのレコードURLを表示\n                context.Log('レコードURL：https://pleasanter.net/fs/items/' + model.IssueId );\n                context.Log('お客様環境リンク：' + model.ClassC);\n                context.Log('--------------------------------');\n            }\n        }\n        context.UserData.calcTargetPiriod = startCalcDate + '～' + endCalcDate;\n        // 「開始予定」・「完了予定」・「予定工数」・「実工数」・「予実差」項目に値を設定\n        function calculateCost(site) {\n            // 「状況」項目が「完了」以外場合\n            if (site.Status !== 900) {\n                // 「予定工数」項目の値を追加\n                context.UserData.expectationCost += site.NumA;\n                // 「開始予定」項目の値を設定\n                subTaskStartDate = new Date(site.StartTime).getFullYear() + '/' + (new Date(site.StartTime).getMonth() + 1) + '/' + new Date(site.StartTime).getDate() + ' ' + (new Date(site.StartTime).getHours() + 9) + ':' + new Date(site.StartTime).getMinutes() + ':' + new Date(site.StartTime).getSeconds();\n                // 「完了予定」項目の値を設定\n                subTaskEndDate = new Date(site.CompletionTime).getHours() + 9 + ':' + new Date(site.CompletionTime).getMinutes() + ':' + new Date(site.CompletionTime).getSeconds();\n                // 着手予定日時を設定\n                time = subTaskStartDate + '～' + subTaskEndDate;\n                // 「予定工数」項目が0よりも大きい場合\n                if (site.NumA > 0) {\n                    minutes = site.NumA;\n                // 「予定工数」項目が0以下の場合\n                } else {\n                    minutes = 0;\n                }\n                // 子レコードから取得した情報を連想配列として追加\n                subTaskInfo.push({ Name: site.Title, Status: '着手予定', Time: time, minute: minutes, });\n            // 「状況」項目が「完了」の場合\n            } else {\n                // 「予定工数」項目の値を追加\n                context.UserData.actualCost += site.NumB;\n                // 「開始」項目の値を設定\n                subTaskStartDate = new Date(site.DateA).getFullYear() + '/' + (new Date(site.DateA).getMonth() + 1) + '/' + new Date(site.DateA).getDate() + ' ' + (new Date(site.DateA).getHours() + 9) + ':' + new Date(site.DateA).getMinutes() + ':' + new Date(site.DateA).getSeconds();\n                // 「完了」項目の値を設定\n                subTaskEndDate = new Date(site.DateB).getHours() + 9 + ':' + new Date(site.DateB).getMinutes() + ':' + new Date(site.DateB).getSeconds();\n                time = subTaskStartDate + '～' + subTaskEndDate;\n                // 「実工数」項目が0よりも大きい場合\n                if (site.NumB > 0) {\n                    minutes = site.NumB;\n                    // 「実工数」項目が0以下の場合\n                } else {\n                    minutes = 0;\n                }\n                subTaskInfo.push({ Name: site.Title, Status: '完了', Time: time, minute: minutes,\n                });\n            }\n            // 「予定工数」項目の値を追加\n            recordExpectationCost += site.NumA;\n            // 「実工数」項目の値を追加\n            recordActualCost += site.NumB;\n            // 「予実差」項目の値を追加\n            recordDifferenceCost += Number(site.ClassC);\n        }\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}\n",
            "Id": 6
          },
          {
            "Title": "工数集計処理②",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "try {\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる要修正箇所\n    */\n    // 今月の稼働日数を設定する変数を初期化\n    let thisMonthDays = 18;\n\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる修正不要箇所\n   */\n    // 今月の予定工数を計算する変数を初期化\n    let resultExpectationCost;\n    // 今月の実工数を計算する変数を初期化\n    let resultActualCost;\n    // 今月工数を設定する変数を初期化\n    let thisMonthCost;\n    // 一覧画面\n    if (context.ControlId === 'BulkProcessCommand') {\n        context.Log('集計対象期間：' + context.UserData.calcTargetPiriod);\n        context.Log('今月の稼働日数：' + thisMonthDays + '日');\n        thisMonthCost = thisMonthDays * 420;\n        context.Log('今月工数(420分/日)：' + thisMonthCost + '分');\n        resultExpectationCost = (context.UserData.expectationCost / thisMonthCost) * 100;\n        resultActualCost = (context.UserData.actualCost / thisMonthCost) * 100;\n        context.Log( '今月工数：' + Math.round(resultExpectationCost + resultActualCost) / 100 + '人月' );\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}\n",
            "Id": 7
          }
        ],
        "NoDisplayIfReadOnly": false
      },
      "Publish": false,
      "DisableCrossSearch": false,
      "Comments": []
    },
    {
      "TenantId": 1,
      "SiteId": 11269012,
      "Title": "社内業務",
      "SiteName": "",
      "SiteGroupName": "",
      "Body": "",
      "GridGuide": "",
      "EditorGuide": "",
      "CalendarGuide": "",
      "CrosstabGuide": "",
      "GanttGuide": "",
      "BurnDownGuide": "",
      "TimeSeriesGuide": "",
      "AnalyGuide": "",
      "KambanGuide": "",
      "ImageLibGuide": "",
      "ReferenceType": "Sites",
      "ParentId": 11267690,
      "InheritPermission": 11269012,
      "SiteSettings": {
        "Version": 1.017,
        "ReferenceType": "Sites",
        "Styles": [
          {
            "Title": "背景色",
            "All": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          }
        ],
        "NoDisplayIfReadOnly": false
      },
      "Publish": false,
      "DisableCrossSearch": false,
      "Comments": []
    },
    {
      "TenantId": 1,
      "SiteId": 11269013,
      "Title": "KPTテーブル",
      "SiteName": "",
      "SiteGroupName": "KPTテーブル",
      "Body": "",
      "GridGuide": "",
      "EditorGuide": "",
      "CalendarGuide": "",
      "CrosstabGuide": "",
      "GanttGuide": "",
      "BurnDownGuide": "",
      "TimeSeriesGuide": "",
      "AnalyGuide": "",
      "KambanGuide": "",
      "ImageLibGuide": "",
      "ReferenceType": "Results",
      "ParentId": 11269012,
      "InheritPermission": 11269013,
      "SiteSettings": {
        "Version": 1.017,
        "ReferenceType": "Results",
        "GridColumns": [
          "ResultId",
          "ClassH",
          "Status",
          "DescriptionA",
          "DescriptionB",
          "DescriptionC",
          "ClassA",
          "ClassB"
        ],
        "EditorColumnHash": {
          "General": [
            "ClassC",
            "ClassE",
            "ClassD",
            "ClassH",
            "Status",
            "DescriptionA",
            "DescriptionB",
            "DescriptionC",
            "AttachmentsA",
            "ClassA",
            "ClassB"
          ]
        },
        "LinkColumns": [
          "ClassH",
          "Status",
          "DescriptionA",
          "DescriptionB",
          "DescriptionC"
        ],
        "Columns": [
          {
            "ColumnName": "Title",
            "ValidateRequired": false
          },
          {
            "ColumnName": "ClassA",
            "LabelText": "キーワード",
            "ExtendedHtmlAfterControl": "<button onclick=\"window.open(`https://www.google.com/search?q=${$p.getControl('ClassA').val()}`,'_blank');\"\nclass=\"button-icon\"\nstyle=\"position:absolute;left:343px;margin-top:2px;\"\ndata-icon=\"ul-icon-search\">\n    検索\n</button>"
          },
          {
            "ColumnName": "ClassB",
            "LabelText": "参考リンク"
          },
          {
            "ColumnName": "DescriptionA",
            "LabelText": "K(Keep)",
            "Description": "できたことや継続することを入力してください。",
            "InputGuide": "できたことや継続することを入力してください。"
          },
          {
            "ColumnName": "DescriptionB",
            "LabelText": "P(Problem)",
            "Description": "改善するべき問題点を入力してください。",
            "InputGuide": "改善するべき問題点を入力してください。"
          },
          {
            "ColumnName": "DescriptionC",
            "LabelText": "T(Try)",
            "Description": "今後挑戦したいことを入力してください。",
            "InputGuide": "今後挑戦したいことを入力してください。"
          },
          {
            "ColumnName": "ClassC",
            "LabelText": "メインタスクID",
            "ChoicesText": "[[11269015]]",
            "EditorReadOnly": true,
            "Link": true,
            "SearchType": "PartialMatch"
          },
          {
            "ColumnName": "ClassD",
            "LabelText": "サブタスク名",
            "ChoicesText": "[\r\n  {\r\n    \"SiteId\": 11269014,\r\n    \"View\": {\r\n      \"ColumnFilterExpressions\": {\r\n        \"ClassA\": \"[@ClassC]\"\r\n      }\r\n    }\r\n  }\r\n]",
            "SearchType": "PartialMatch"
          },
          {
            "ColumnName": "ClassE",
            "LabelText": "タスク明細ID",
            "AutoNumberingFormat": "[ClassC][NNNN]",
            "AutoNumberingResetType": "String",
            "EditorReadOnly": true
          },
          {
            "ColumnName": "ClassF",
            "LabelText": "メインタスク名",
            "FieldCss": "field-wide"
          },
          {
            "ColumnName": "ClassG",
            "LabelText": "サブタスク名"
          },
          {
            "ColumnName": "ClassH",
            "LabelText": "タイトル",
            "NoWrap": true,
            "EditorReadOnly": true,
            "FieldCss": "field-wide"
          },
          {
            "ColumnName": "Status",
            "ChoicesText": "100,未着手,未,status-new\n900,完了,完,status-closed\n910,保留,留,status-rejected"
          }
        ],
        "Links": [
          {
            "ColumnName": "ClassD",
            "SiteId": 11269014,
            "View": {
              "Id": 0,
              "ColumnFilterExpressions": {
                "ClassA": "[@ClassC]"
              },
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "JsonFormat": true
          },
          {
            "ColumnName": "ClassC",
            "SiteId": 11269015
          }
        ],
        "Processes": [
          {
            "Id": 1,
            "Name": "削除",
            "DisplayName": "削除",
            "CurrentStatus": -1,
            "ChangedStatus": -1,
            "OnClick": "$p.ex.execDeleteRecord();",
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          }
        ],
        "Styles": [
          {
            "Title": "背景色",
            "New": true,
            "Edit": true,
            "Index": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          },
          {
            "Title": "「新バージョンとして保存」を非表示にする",
            "New": true,
            "Edit": true,
            "Body": "#VerUp, label[for='VerUp'] {\n    display: none;\n}\n#LinkCreations {\n    display: none;\n}",
            "Id": 2
          }
        ],
        "Scripts": [
          {
            "Title": "ボタンクリック時のレコード削除イベント",
            "Index": true,
            "Body": "// クライアントスクリプト\ntry {\n    // my-row-buttonがクリックされたときのイベント\n    $(document).on('click', '.my-row-button', function (event) {\n        // レコードのIDをコンソールに出力\n        $p.apiDelete({\n        id: $(this).data('id'),\n        done: function (data) {\n            location.reload();\n        }\n    });\n        // 編集画面が開かないようにイベントの伝搬を停止\n        event.stopImmediatePropagation();\n    });\n} catch (ex) {\n    console.log(ex.stack)\n}",
            "Id": 2
          },
          {
            "Title": "レコードを削除する",
            "Edit": true,
            "Body": "$p.ex.execDeleteRecord = function () {\n    const siteId = 0;\n    try {\n        // レコードのIDをコンソールに出力\n        $p.apiDelete({\n            id: $p.id(),\n            done: function (data) {\n                window.location.href = 'https://pleasanter.net/fs/items/' + siteId + '/index'\n            }\n        });\n    } catch (ex) {\n        console.log(ex.stack)\n    }\n}",
            "Id": 4
          },
          {
            "Title": "編集画面設定用($p.events.on_editor_load)",
            "Edit": true,
            "Body": "$p.events.on_editor_load = function () {\n    // 常に新バージョンとして保存をオン\n    let verup = $(\"#VerUp\");\n    verup.prop('checked', true);\n\n    // リンクボタンの表示\n    $('#Results_ClassBField').after('<button type=\"button\" style=\"display:block;float:left;height:30px;padding:7px 12px;border:solid 1px silver;background-color:white;\" onclick=\"Transition()\">リンク</button>');\n};\nfunction Transition() {\n    open($p.getControl('ClassB').val());\n}",
            "Id": 5
          },
          {
            "Title": "一覧画面($p.events.on_grid_load)",
            "Index": true,
            "Body": "$p.events.on_grid_load = function () {\n    // リンク列にリンクを設定\n    let table = document.getElementById('Grid');\n    let colNum = $p.getGridColumnIndex('ClassB');\n    for (let row of table.rows) {\n        console.log(row.className);\n        if (row.className === 'grid-row') {\n            let urlText = row.cells[colNum].textContent;\n            const a1 = document.createElement(\"a\");\n            a1.href = urlText;\n            a1.target = \"_blank\";\n            a1.innerText = urlText;\n            row.cells[colNum].textContent = \"\";\n            row.cells[colNum].appendChild(a1);\n        }\n    }\n}",
            "Id": 6
          }
        ],
        "ServerScripts": [
          {
            "Title": "一覧画面の行に削除ボタンを配置",
            "Name": "",
            "BeforeOpeningRow": true,
            "Body": "// サーバスクリプト\ntry {\n    // 「data-id=\"${model.ResultId}\"」でボタンを表示する行を指定\n    let html = `<button data-id=\"${model.ResultId}\"class=\"button-icon my-row-button\"data-icon=\"ui-icon-circle-triangle-e\">削除</button>`;\n    // 該当業のClassA列に「削除」ボタンを表示\n    columns.ClassA.RawText = html;\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 1
          },
          {
            "Title": "新規・編集画面にある標準の削除・コピー・メールボタンを非表示にする",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "    elements.DisplayType('DeleteCommand', 3);  // 削除\n    elements.DisplayType('OpenCopyDialogCommand', 3);  // コピー\n    elements.DisplayType('EditOutgoingMail', 3);  // メール",
            "Id": 2
          },
          {
            "Title": "一覧画面の一括削除・インポート・エクスポートボタンを非表示にする",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "// 一覧画面\nif (context.Action === 'index') {\n    elements.DisplayType('BulkDeleteCommand', 3);  // 一括削除\n    elements.DisplayType('EditImportSettings', 3);  // インポート\n    elements.DisplayType('OpenExportSelectorDialogCommand', 3);  // エクスポート\n}",
            "Id": 3
          },
          {
            "Title": "メインタスク名に親レコードから取得したメインタスク名を設定する",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "/*\nロジック内で使用する値初期化箇所\nユーザによる要修正箇所\n*/\n// メインタスク管理テーブルテンプレートのサイトIDを設定\nlet MainSiteId = 11269015;\n// サブタスク管理テーブルテンプレートのサイトIDを設定\nlet subSiteId = 11269014;\n\n/*\nロジック内で使用する値初期化箇所\nユーザによる修正不要箇所\n*/\n// 「メインタスクID」項目の値を設定\nlet mainRecordId = model.ClassC;\n// 「サブタスク名」項目の値を設定\nlet subRecordId = model.ClassD;\n// レコード取得条件設定する変数を初期化\nlet data;\nlet ClassH;\n\n/*\nロジック箇所\nユーザによる修正不要箇所\n*/\n// メインタスクのレコード取得条件を設定\ndata = {\n    View: {\n        ColumnFilterHash: {\n            // 「タスクID」項目：メインタスクのサイトID\n            IssueId: mainRecordId,\n        },\n    },\n};\n// レコードの情報を取得\nlet mainResults = items.Get(MainSiteId, JSON.stringify(data));\n// レコード数分反復\nfor (let result of mainResults) {\n    // 「メインタスク名」項目にメインタスク名を設定\n    model.ClassF = result.ClassA;\n    ClassH = result.ClassA;\n}\n\nif (subRecordId) {\n    // メインタスクのレコード取得条件を設定\n    data = {\n        View: {\n            ColumnFilterHash: {\n                // 「タスクID」項目：サブタスクのサイトID\n                IssueId: subRecordId,\n            },\n        },\n    };\n    // レコードの情報を取得\n    let subResults = items.Get(subSiteId, JSON.stringify(data));\n    // レコード数分反復\n    for (let result of subResults) {\n        // 「サブタスク名」項目にサブタスク名を設定\n        model.ClassG = result.Title;\n        model.ClassH = ClassH + ' - ' + result.Title;\n    }\n} else {\n    model.ClassH = ClassH;\n}\n",
            "Id": 4
          }
        ],
        "NoDisplayIfReadOnly": false
      },
      "Publish": false,
      "DisableCrossSearch": false,
      "Comments": []
    },
    {
      "TenantId": 1,
      "SiteId": 11269014,
      "Title": "サブタスク管理テーブル",
      "SiteName": "",
      "SiteGroupName": "サブタスク管理テーブル",
      "Body": "",
      "GridGuide": "",
      "EditorGuide": "",
      "CalendarGuide": "",
      "CrosstabGuide": "",
      "GanttGuide": "",
      "BurnDownGuide": "",
      "TimeSeriesGuide": "",
      "AnalyGuide": "",
      "KambanGuide": "",
      "ImageLibGuide": "",
      "ReferenceType": "Issues",
      "ParentId": 11269012,
      "InheritPermission": 11269014,
      "SiteSettings": {
        "Version": 1.017,
        "ReferenceType": "Issues",
        "GridView": 3,
        "LinkTableView": 1,
        "GridColumns": [
          "ClassA",
          "ClassB",
          "Title",
          "StartTime",
          "CompletionTime"
        ],
        "EditorColumnHash": {
          "General": [
            "ClassA",
            "ClassB",
            "_Section-1",
            "ClassD",
            "Title",
            "Body",
            "DescriptionA",
            "AttachmentsA",
            "_Section-2",
            "StartTime",
            "CompletionTime",
            "NumC",
            "_Section-3",
            "DateA",
            "DateB",
            "Status",
            "CheckA",
            "_Section-4",
            "NumA",
            "NumB",
            "ClassC"
          ]
        },
        "SectionLatestId": 4,
        "Sections": [
          {
            "Id": 1,
            "LabelText": "作業内容",
            "AllowExpand": true,
            "Expand": true
          },
          {
            "Id": 2,
            "LabelText": "予定",
            "AllowExpand": true,
            "Expand": true
          },
          {
            "Id": 3,
            "LabelText": "実作業",
            "AllowExpand": true,
            "Expand": false
          },
          {
            "Id": 4,
            "LabelText": "サマリ",
            "AllowExpand": true,
            "Expand": false
          }
        ],
        "Columns": [
          {
            "ColumnName": "StartTime",
            "LabelText": "開始予定",
            "GridFormat": "Ymdhm",
            "EditorFormat": "Ymdhm",
            "ValidateRequired": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "CompletionTime",
            "LabelText": "完了予定",
            "GridFormat": "Ymdhm",
            "EditorFormat": "Ymdhm",
            "DateTimeStep": 1
          },
          {
            "ColumnName": "ClassA",
            "LabelText": "タスクID",
            "ChoicesText": "[[11269015]]",
            "ValidateRequired": true,
            "EditorReadOnly": true,
            "Link": true,
            "SearchType": "PartialMatch"
          },
          {
            "ColumnName": "ClassB",
            "LabelText": "タスク明細ID",
            "AutoNumberingFormat": "[ClassA][NNNN]",
            "AutoNumberingResetType": "String",
            "ValidateRequired": true,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "Title",
            "LabelText": "サブタスク名"
          },
          {
            "ColumnName": "NumA",
            "LabelText": "予定工数",
            "NoWrap": true,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "NumB",
            "LabelText": "実工数",
            "DefaultInput": "0",
            "EditorReadOnly": true
          },
          {
            "ColumnName": "ClassC",
            "LabelText": "予実差",
            "DefaultInput": "0",
            "EditorReadOnly": true
          },
          {
            "ColumnName": "DateA",
            "LabelText": "開始",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "DateB",
            "LabelText": "完了",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "Status",
            "ChoicesText": "100,未着手,未,status-new\n200,実施中,実,status-inprogress\n300,レビュー,レ,status-review\n900,完了,完,status-closed\n910,保留,留,status-rejected\n920,不要,不,status-rejected",
            "ValidateRequired": false,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "NumC",
            "LabelText": "調整",
            "DefaultInput": "0"
          },
          {
            "ColumnName": "DescriptionA",
            "LabelText": "備考"
          },
          {
            "ColumnName": "AttachmentsA",
            "LabelText": "添付ファイル"
          },
          {
            "ColumnName": "ClassD",
            "LabelText": "メインタスク名",
            "EditorReadOnly": true,
            "FieldCss": "field-wide"
          },
          {
            "ColumnName": "CheckA",
            "LabelText": "不要",
            "EditorReadOnly": true
          }
        ],
        "Links": [
          {
            "ColumnName": "ClassA",
            "SiteId": 11269015
          }
        ],
        "Processes": [
          {
            "Id": 1,
            "Name": "作業開始",
            "DisplayName": "作業開始",
            "CurrentStatus": 100,
            "ChangedStatus": 200,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateA",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 3,
            "Name": "レビュー実施",
            "DisplayName": "レビュー実施",
            "CurrentStatus": 200,
            "ChangedStatus": 300,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 4,
            "Name": "完了",
            "DisplayName": "完了",
            "CurrentStatus": 300,
            "ChangedStatus": 900,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateB",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 5,
            "Name": "完了",
            "DisplayName": "完了",
            "CurrentStatus": 200,
            "ChangedStatus": 900,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateB",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 6,
            "Name": "保留",
            "DisplayName": "保留",
            "CurrentStatus": -1,
            "ChangedStatus": 910,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 7,
            "Name": "再始動",
            "DisplayName": "再始動",
            "CurrentStatus": 910,
            "ChangedStatus": 100,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 8,
            "Name": "不要",
            "DisplayName": "不要",
            "CurrentStatus": -1,
            "ChangedStatus": 920,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputValue",
                "ColumnName": "CheckA",
                "Value": "true"
              }
            ]
          }
        ],
        "ViewLatestId": 3,
        "Views": [
          {
            "Id": 1,
            "Name": "リンク",
            "GridColumns": [
              "Title",
              "Status",
              "StartTime",
              "CompletionTime",
              "NumA",
              "NumB",
              "ClassC"
            ],
            "ColumnFilterHash": {
              "Status": "[\"100\",\"200\",\"300\",\"900\",\"910\"]"
            },
            "ColumnSorterHash": {
              "StartTime": "asc"
            },
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "CalendarTimePeriod": "Monthly",
            "CalendarFromTo": "StartTime-CompletionTime",
            "CrosstabGroupByX": "StartTime",
            "CrosstabGroupByY": "Owner",
            "CrosstabAggregateType": "Total",
            "CrosstabValue": "NumA",
            "CrosstabTimePeriod": "Monthly",
            "ApiDataType": 0
          },
          {
            "Id": 2,
            "Name": "一覧",
            "ColumnSorterHash": {
              "StartTime": "asc"
            },
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "CalendarTimePeriod": "Monthly",
            "CalendarFromTo": "StartTime-CompletionTime",
            "CrosstabGroupByX": "Status",
            "CrosstabGroupByY": "Owner",
            "CrosstabAggregateType": "Total",
            "CrosstabValue": "NumA",
            "CrosstabTimePeriod": "Monthly",
            "ApiDataType": 0
          },
          {
            "Id": 3,
            "Name": "カレンダー",
            "DefaultMode": "Calendar",
            "ColumnFilterHash": {
              "Status": "[\"100\",\"200\",\"300\"]"
            },
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "CalendarTimePeriod": "Monthly",
            "CalendarFromTo": "StartTime-CompletionTime",
            "CrosstabGroupByX": "Status",
            "CrosstabGroupByY": "ClassA",
            "CrosstabAggregateType": "Total",
            "CrosstabValue": "NumB",
            "CrosstabTimePeriod": "Monthly",
            "ApiDataType": 0
          }
        ],
        "Styles": [
          {
            "Title": "背景色",
            "New": true,
            "Edit": true,
            "Index": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          },
          {
            "Title": "「新バージョンとして保存」を非表示にする",
            "New": true,
            "Edit": true,
            "Body": "#VerUp, label[for='VerUp'] {\n    display: none;\n}\n#LinkCreations {\n    display: none;\n}",
            "Id": 2
          }
        ],
        "Scripts": [
          {
            "Title": "編集画面設定用($p.events.on_editor_load)",
            "New": true,
            "Edit": true,
            "Body": "$p.events.on_editor_load = function () {\n    // 常に新バージョンとして保存をオン\n    let verup = $(\"#VerUp\");\n    verup.prop('checked', true);\n};",
            "Id": 1
          },
          {
            "Title": "一覧画面($p.events.on_grid_load)",
            "Index": true,
            "Body": "$p.events.on_grid_load = function () {\n    // リンク列にリンクを設定\n    let table = document.getElementById('Grid');\n    let colNum = $p.getGridColumnIndex('ClassB');\n    for (let row of table.rows) {\n        console.log(row.className);\n        if (row.className === 'grid-row') {\n            let urlText = row.cells[colNum].textContent;\n            const a1 = document.createElement(\"a\");\n            a1.href = urlText;\n            a1.target = \"_blank\";\n            a1.innerText = urlText;\n            row.cells[colNum].textContent = \"\";\n            row.cells[colNum].appendChild(a1);\n        }\n    }\n}",
            "Id": 5
          }
        ],
        "ServerScripts": [
          {
            "Title": "完了予定日が開始予定日より過去日だった場合の分単位での制御",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "try {\n    let startTime = new Date(model.StartTime);\n    let endTime = new Date(model.CompletionTime);\n    let minutes = Math.floor((endTime- startTime) / (1000 * 60));\n    if (minutes <= 0) {\n        context.Error('完了日が不正です。');\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 1
          },
          {
            "Title": "開始予定項目と完了予定項目から予定工数を分単位で自動設定",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "try {\n    let startTime = new Date(model.StartTime);\n    let endTime = new Date(model.CompletionTime);\n    let minutes = Math.floor((endTime- startTime) / (1000 * 60));\n    model.NumA = minutes;\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 2
          },
          {
            "Title": "開始項目と完了項目から実工数項目に値を設定する",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "try {\n    if (model.DateB > 0) {\n    let start = (new Date(model.DateA)) / (1000 * 60);\n    let end = (new Date(model.DateB)) / (1000 * 60);\n    let adjustCosts = model.NumC;\n    model.NumB = end - start + adjustCosts;\n    let expectationCosts = model.NumA;\n    let actualCosts = model.NumB;\n    let differenceCosts = expectationCosts - actualCosts;\n    model.ClassC = differenceCosts;\n    } else {\n        model.NumB = 0;\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}\n",
            "Id": 3
          },
          {
            "Title": "予定工数項目と実工数項目から予実差項目に値を自動で設定する",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "try {\n    let expectationCosts = model.NumA;\n    let actualCosts = Math.round(model.NumB, 1);\n    let differenceCosts = expectationCosts - actualCosts;\n    model.ClassC = differenceCosts;\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 4
          },
          {
            "Title": "メインタスク名に親レコードから取得したメインタスク名を設定する",
            "Name": "",
            "BeforeCreate": true,
            "BeforeUpdate": true,
            "Body": "let recordId = model.ClassA;\nlet siteId = 11269015;\nlet data = {\n    View: {\n        ColumnFilterHash: {\n            IssueId: recordId,\n        }\n    }\n};\nlet results = items.Get(siteId, JSON.stringify(data));\nfor (let result of results) {\n    model.ClassD = result.ClassA;\n}\n",
            "Id": 6
          },
          {
            "Title": "新規・編集画面にある標準の削除・コピー・メールボタンを非表示にする",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "    elements.DisplayType('DeleteCommand', 3);  // 削除\n    elements.DisplayType('OpenCopyDialogCommand', 3);  // コピー\n    elements.DisplayType('EditOutgoingMail', 3);  // メール",
            "Id": 8
          },
          {
            "Title": "一覧画面の一括削除・インポート・エクスポートボタンを非表示にする",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "// 一覧画面\nif (context.Action === 'index') {\n    elements.DisplayType('BulkDeleteCommand', 3);  // 一括削除\n    elements.DisplayType('EditImportSettings', 3);  // インポート\n    elements.DisplayType('OpenExportSelectorDialogCommand', 3);  // エクスポート\n}",
            "Id": 9
          }
        ],
        "NoDisplayIfReadOnly": false
      },
      "Publish": false,
      "DisableCrossSearch": false,
      "Comments": []
    },
    {
      "TenantId": 1,
      "SiteId": 11269015,
      "Title": "メインタスク管理テーブル",
      "SiteName": "",
      "SiteGroupName": "メインタスク管理テーブル",
      "Body": "",
      "GridGuide": "",
      "EditorGuide": "",
      "CalendarGuide": "",
      "CrosstabGuide": "",
      "GanttGuide": "",
      "BurnDownGuide": "",
      "TimeSeriesGuide": "",
      "AnalyGuide": "",
      "KambanGuide": "",
      "ImageLibGuide": "",
      "ReferenceType": "Issues",
      "ParentId": 11269012,
      "InheritPermission": 11269015,
      "SiteSettings": {
        "Version": 1.017,
        "ReferenceType": "Issues",
        "GridView": 2,
        "LinkTableView": 1,
        "GridColumns": [
          "IssueId",
          "ClassA",
          "StartTime",
          "CompletionTime",
          "NumA",
          "NumB",
          "ClassB",
          "Manager"
        ],
        "EditorColumnHash": {
          "General": [
            "IssueId",
            "_Section-1",
            "ClassA",
            "Body",
            "AttachmentsA",
            "ClassC",
            "_Section-2",
            "StartTime",
            "CompletionTime",
            "_Section-3",
            "DateA",
            "DateB",
            "Status",
            "_Section-4",
            "NumA",
            "NumB",
            "ClassB"
          ]
        },
        "SectionLatestId": 4,
        "Sections": [
          {
            "Id": 1,
            "LabelText": "作業内容",
            "AllowExpand": true,
            "Expand": true
          },
          {
            "Id": 2,
            "LabelText": "予定",
            "AllowExpand": true,
            "Expand": false
          },
          {
            "Id": 3,
            "LabelText": "実作業",
            "AllowExpand": true,
            "Expand": false
          },
          {
            "Id": 4,
            "LabelText": "サマリ",
            "AllowExpand": true,
            "Expand": false
          }
        ],
        "TitleColumns": [
          "Title",
          "IssueId"
        ],
        "Columns": [
          {
            "ColumnName": "StartTime",
            "LabelText": "開始予定",
            "GridFormat": "Ymdahm",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "CompletionTime",
            "LabelText": "完了予定",
            "GridFormat": "Ymdahm",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "Owner",
            "NoWrap": true,
            "ValidateRequired": true
          },
          {
            "ColumnName": "NumA",
            "LabelText": "予定工数",
            "NoWrap": true,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "NumB",
            "LabelText": "実工数",
            "EditorReadOnly": true
          },
          {
            "ColumnName": "ClassB",
            "LabelText": "予実差",
            "DefaultInput": "0",
            "ValidateRequired": true,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "IssueId",
            "LabelText": "メインタスクID"
          },
          {
            "ColumnName": "ClassA",
            "LabelText": "メインタスク",
            "NoWrap": true,
            "ValidateRequired": true,
            "FieldCss": "field-wide"
          },
          {
            "ColumnName": "Title",
            "LabelText": "メインタスクID",
            "ValidateRequired": false
          },
          {
            "ColumnName": "ClassC",
            "LabelText": "参考リンク"
          },
          {
            "ColumnName": "DateA",
            "LabelText": "開始",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "DateB",
            "LabelText": "完了",
            "EditorFormat": "Ymdhm",
            "EditorReadOnly": true,
            "DateTimeStep": 1
          },
          {
            "ColumnName": "Status",
            "ValidateRequired": false,
            "EditorReadOnly": true
          },
          {
            "ColumnName": "Manager",
            "ValidateRequired": true
          },
          {
            "ColumnName": "AttachmentsA",
            "LabelText": "添付ファイル"
          },
          {
            "ColumnName": "ClassE",
            "LabelText": "タスク分類",
            "DefaultInput": "社内業務",
            "EditorReadOnly": true
          }
        ],
        "Processes": [
          {
            "Id": 1,
            "Name": "作業開始",
            "DisplayName": "作業開始",
            "CurrentStatus": 150,
            "ChangedStatus": 200,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateA",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 3,
            "Name": "レビュー実施",
            "DisplayName": "レビュー実施",
            "CurrentStatus": 200,
            "ChangedStatus": 300,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 4,
            "Name": "完了",
            "DisplayName": "完了",
            "CurrentStatus": 300,
            "ChangedStatus": 900,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateB",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 5,
            "Name": "完了",
            "DisplayName": "完了",
            "CurrentStatus": 200,
            "ChangedStatus": 900,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            },
            "DataChanges": [
              {
                "Id": 1,
                "Type": "InputDateTime",
                "ColumnName": "DateB",
                "BaseDateTime": "CurrentTime",
                "Value": "0,Days"
              }
            ]
          },
          {
            "Id": 6,
            "Name": "保留",
            "DisplayName": "保留",
            "CurrentStatus": -1,
            "ChangedStatus": 910,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 7,
            "Name": "準備",
            "DisplayName": "準備",
            "ScreenType": 10,
            "CurrentStatus": 100,
            "ChangedStatus": 150,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          },
          {
            "Id": 8,
            "Name": "工数集計",
            "DisplayName": "工数集計",
            "CurrentStatus": -1,
            "ChangedStatus": -1,
            "AllowBulkProcessing": true,
            "View": {
              "Id": 0,
              "ApiColumnKeyDisplayType": 0,
              "ApiColumnValueDisplayType": 0,
              "CalendarSiteId": 0,
              "ApiDataType": 0
            }
          }
        ],
        "ViewLatestId": 2,
        "Views": [
          {
            "Id": 1,
            "Name": "リンク",
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "ApiDataType": 0
          },
          {
            "Id": 2,
            "Name": "一覧",
            "DefaultMode": "Index",
            "GridColumns": [
              "IssueId",
              "ClassA",
              "Status",
              "StartTime",
              "CompletionTime",
              "DateA",
              "DateB",
              "NumA",
              "NumB",
              "ClassB",
              "Manager"
            ],
            "ColumnFilterHash": {
              "Status": "[\"100\",\"150\",\"200\",\"300\",\"910\"]"
            },
            "ColumnSorterHash": {
              "DateA": "asc"
            },
            "ApiColumnKeyDisplayType": 0,
            "ApiColumnValueDisplayType": 0,
            "CalendarSiteId": 0,
            "CalendarTimePeriod": "Monthly",
            "CalendarFromTo": "StartTime-CompletionTime",
            "CrosstabGroupByX": "Status",
            "CrosstabGroupByY": "Status",
            "CrosstabAggregateType": "Total",
            "CrosstabValue": "NumA",
            "CrosstabTimePeriod": "Monthly",
            "ApiDataType": 0
          }
        ],
        "Styles": [
          {
            "Title": "背景色",
            "New": true,
            "Edit": true,
            "Index": true,
            "Body": "body {\n    background-color: #808080;\n}\n\n#FieldSetGeneral{\n    background-color: #C0C0C0;\n}\n\n.grid-row{\n    background-color: #C0C0C0;\n}",
            "Id": 1
          },
          {
            "Title": "「新バージョンとして保存」を非表示にする",
            "New": true,
            "Edit": true,
            "Body": "#VerUp, label[for='VerUp'] {\n    display: none;\n}",
            "Id": 2
          }
        ],
        "Scripts": [
          {
            "Title": "編集画面設定用($p.events.on_editor_load)",
            "New": true,
            "Edit": true,
            "Body": "$p.events.on_editor_load = function () {\n    // 常に新バージョンとして保存をオン\n    let verup = $(\"#VerUp\");\n    verup.prop('checked', true);\n\n    // リンクボタンの表示\n    $('#Issues_ClassCField').after('<button type=\"button\" style=\"display:block;float:left;height:30px;padding:7px 12px;border:solid 1px silver;background-color:white;\" onclick=\"Transition()\">リンク</button>');\n};\nfunction Transition() {\n    open($p.getControl('ClassC').val());\n}",
            "Id": 1
          }
        ],
        "ServerScripts": [
          {
            "Title": "子テーブルから情報を取得する",
            "Name": "",
            "BeforeUpdate": true,
            "Body": "try {\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる要修正箇所\n    */\n    // サブタスク管理テーブルテンプレートのサイトIDを設定\n    const siteId = 11269014;\n\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる修正不要箇所\n    */\n    // メインタスクIDを設定\n    const mainTaskId = model.IssueId;\n    // 予定工数を計上する変数を初期化\n    let expectationCosts = 0;\n    // 実工数を計上する変数を初期化\n    let actualCosts = 0;\n    // 予実差を計上する変数を初期化\n    let differenceCosts = 0;\n    // 開始予定を設定する変数を初期化\n    let expectationStartTimes = new Array();\n    // 完了予定を設定する変数を初期化\n    let expectationEndTimes = new Array();\n    // 最も新しい開始予定を設定する変数を初期化\n    let firstStartTime = new Date();\n    // 最も古い終了予定を設定する変数を初期化\n    let lastEndTime = firstStartTime.getMinutes() + 1;\n    // 子レコードの取得条件を設定\n    let data = {\n        View: {\n            ColumnFilterHash: {\n                // 「タスクID」項目：メインタスクのサイトID\n                ClassA: '[' + mainTaskId + ']',\n                // 「不要」項目：チャックされていない\n                CheckA: false,\n            },\n        },\n    };\n\n    /*\n    各ロジック呼び出し制御箇所\n    ユーザによる修正不要箇所\n    */\n    // リンクされている子レコードの情報を取得\n    let sites = items.Get(siteId, JSON.stringify(data));\n    // 子レコードが存在している場合\n    if (sites) {\n        // レコード数分反復\n        for (let site of sites) {\n            // 予定工数と実工数の値を取得\n            calculateCost(site);\n            // 開始予定と終了予定の値を取得\n            getTime(site);\n        }\n        // 集計した予定工数と実工数から予実差を計算し、値を設定\n        setCost();\n        // 開始予定から値を設定\n        setExpectationStartTime();\n        // 終了予定から値を設定\n        setExpectationEndTime();\n        // 子レコードが存在していない場合\n    } else {\n        // 「予実差」項目に「0」を設定\n        model.ClassB = 0;\n    }\n\n    /*\n    ロジック箇所\n    ユーザによる修正不要箇所\n    */\n    // 予定工数と実工数の値を取得\n    function calculateCost(site) {\n        expectationCosts += site.NumA;\n        actualCosts += site.NumB;\n    }\n    // 開始予定と終了予定の値を取得\n    function getTime(site) {\n        expectationStartTimes.push(site.StartTime);\n        expectationEndTimes.push(site.CompletionTime);\n    }\n    // 取得した予定工数と実工数から予実差を計算し、それぞれ値を設定\n    function setCost() {\n        differenceCosts = expectationCosts - actualCosts;\n        // 「予定工数」項目に値を設定\n        model.NumA = expectationCosts;\n        // 「実工数」項目に値を設定\n        model.NumB = actualCosts;\n        // 「予実差」項目に値を設定\n        model.ClassB = differenceCosts;\n    }\n    // 開始予定から値を設定する\n    function setExpectationStartTime() {\n        // 配列「expectationStartTimes」の値を設定する変数の初期化\n        let tmp;\n        // 反復処理回数をカウントする変数の初期化\n        let count = 1;\n        // 配列「expectationStartTimes」にデータが存在している場合\n        if (expectationStartTimes) {\n            // 配列「expectationStartTimes」のデータ数分反復\n            for (let expectationStartTime of expectationStartTimes) {\n                // 1回目の処理\n                if (count === 1) {\n                    // 日付オブジェクトに変換した変数「expectationStartTime」の値を変数「firstStartTime」に設定\n                    firstStartTime = new Date(expectationStartTime);\n                } else {\n                    // 日付オブジェクトに変換した変数「expectationStartTime」の値を変数「tmp」に設定\n                    tmp = new Date(expectationStartTime);\n                    // 変数「tmp」が変数「firstStartTime」よりも小さい(前)だった場合\n                    if (tmp < firstStartTime) {\n                        // 変数「firstStartTime」に変数[tmp]を設定\n                        firstStartTime = tmp;\n                    }\n                }\n                // インクリメント\n                count++;\n            }\n            // 最終的に最も小さい(前の)値を「開始予定」項目に設定\n            model.StartTime = firstStartTime;\n            // 配列「expectationStartTimes」にデータが存在していない場合\n        } else {\n            // 今の日時を「開始予定」項目に設定\n            model.StartTime = firstStartTime;\n        }\n    }\n    // 終了予定から値を設定\n    function setExpectationEndTime() {\n        let tmp;\n        let count = 1;\n        if (expectationEndTimes) {\n            for (let expectationEndTime of expectationEndTimes) {\n                if (count === 1) {\n                    lastEndTime = new Date(expectationEndTime);\n                } else {\n                    tmp = new Date(expectationEndTime);\n                    // 変数「tmp」が変数「firstStartTime」よりも大きい(後)だった場合\n                    if (tmp > lastEndTime) {\n                        lastEndTime = tmp;\n                    }\n                }\n                count++;\n            }\n            lastEndTime.setHours(lastEndTime.getHours() + 9);\n            model.CompletionTime = lastEndTime;\n        } else {\n            lastEndTime.setHours(lastEndTime.getHours() + 9);\n            model.CompletionTime = lastEndTime;\n        }\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}\n",
            "Id": 1
          },
          {
            "Title": "標準ボタンを非表示",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "try {\n    elements.DisplayType('CreateCommand', 1);\n    elements.DisplayType('OpenCopyDialogCommand', 1);\n    elements.DisplayType('EditOutgoingMail', 1);\n    elements.DisplayType('DeleteCommand', 1);\n} catch (ex) {\n    context.Log(ex.stack);\n}",
            "Id": 3
          },
          {
            "Title": "一覧画面の一括削除・インポート・エクスポートボタンを非表示にする",
            "Name": "",
            "Body": "// 一覧画面\nif (context.Action === 'index') {\n    elements.DisplayType('BulkDeleteCommand', 3);  // 一括削除\n    elements.DisplayType('EditImportSettings', 3);  // インポート\n    elements.DisplayType('OpenExportSelectorDialogCommand', 3);  // エクスポート\n}",
            "Id": 5
          },
          {
            "Title": "工数集計処理①",
            "Name": "",
            "AfterUpdate": true,
            "Body": "try {\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる要修正箇所\n    */\n    // 工数集計対象年を設定する定数を初期化\n    const calcYear = 2024;\n    // 工数集計対象月を設定する定数を初期化\n    const calcMonth = 3;\n    // サブタスク管理テーブルのサイトIDを設定\n    const siteId = 11269014;\n\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる修正不要箇所\n    */\n    // 工数集計対象の開始年月日を設定する変数を初期化\n    let startCalcDate;\n    // 工数集計対象の終了年月日を設定する変数を初期化\n    let endCalcDate;\n    // 今日の日付を取得\n    let date = new Date();\n    date.setMonth(date.getMonth() + 1, 0);\n    // 今月末日を設定する定数を初期化\n    const thisMonthLastDate = date.getDate();\n    // 取得するサイト情報の条件を設定する変数を初期化\n    let data;\n    // メインタスクIDを設定\n    const mainTaskId = model.IssueId;\n    // メインタスクごとに集計する各工数の変数を初期化；\n    // レコード単位の予定工数\n    let recordExpectationCost;\n    // レコード単位の実工数\n    let recordActualCost;\n    // レコード単位の予実差\n    let recordDifferenceCost;\n    // 開始予定時間\n    let startDate;\n    // 完了予定時間\n    let endDate;\n    // サブタスクのタイトルと作業日時\n    let subTaskInfo = [];\n    // 開始予定\n    let subTaskStartDate;\n    // 完了予定\n    let subTaskEndDate;\n    // 時間\n    let time;\n    // 分\n    let minutes;\n\n    /*\n    ロジック箇所\n    ユーザによる修正不要箇所\n    */\n    // 一覧画面にて\n    if (context.ControlId === 'BulkProcessCommand') {\n        // 当月1日の「00:00:00」を設定\n        startCalcDate = calcYear + '/' + calcMonth + '/' + '1 00:00:00';\n        // 当月末日の「23:59:59」を設定\n        endCalcDate = calcYear + '/' + calcMonth + '/' + thisMonthLastDate + ' 23:59:59';\n        // 子レコードの取得条件を設定\n        data = {\n            View: {\n                ColumnFilterHash: {\n                    // 「タスクID」項目：メインタスクのサイトID\n                    ClassA: '[' + mainTaskId + ']',\n                    // 「不要」項目：チャックされていない\n                    CheckA: false,\n                    // 「開始予定」項目：当月1日の「00:00:00」以降\n                    StartTime: \"['\" + startCalcDate + \",']\",\n                    // 「完了予定」項目：当月末日の「23:59:59」以前\n                    CompletionTime: \"[',\" + endCalcDate + \"']\",\n                },\n                \"ColumnSorterHash\":{\n                    \"ClassB\":\"asc\"\n                }\n            }\n        };\n        // 変数「context.UserData.expectationCost」に値が設定されていない場合\n        if (!context.UserData.expectationCost) context.UserData.expectationCost = 0;\n        // 変数「context.UserData.actualCost」に値が設定されていない場合\n        if (!context.UserData.actualCost) context.UserData.actualCost = 0;\n        // 変数「context.UserData.differenceCost」に値が設定されていない場合\n        if (!context.UserData.differenceCost) context.UserData.differenceCost = 0;\n        // 子レコードの情報を取得\n        let sites = items.Get(siteId, JSON.stringify(data));\n        recordExpectationCost = 0;\n        recordActualCost = 0;\n        recordDifferenceCost = 0;\n        // 子レコードが存在している場合\n        if (sites) {\n            // レコード数分反復\n            for (let site of sites) {\n                // 予定工数と実工数を計上\n                calculateCost(site);\n            }\n            // 今月予定しているサブタスクがある場合\n            if (recordExpectationCost > 0) {\n                // 日付オブジェクトに変換した「開始予定」項目の値を設定\n                startDate = new Date(model.StartTime);\n                // 変数「startDate」から年月日を設定\n                startDate = startDate.getFullYear() + '/' + (startDate.getMonth() + 1) + '/' + startDate.getDate();\n                // 日付オブジェクトに変換した「完了予定」項目の値を設定\n                endDate = new Date(model.CompletionTime);\n                // 変数「endDate」から年月日を設定\n                endDate = endDate.getFullYear() + '/' + (endDate.getMonth() + 1) + '/' + endDate.getDate();\n                // 各タスクの工数をコンソールに出力\n                context.Log('--------------------------------');\n                context.Log('タスク名：' + model.ClassA);\n                context.Log('タスク着手期間：' + startDate + '～' + endDate);\n                // サブタスクの「サブタスク名」項目・「状況」・「着手日時」をサブタスクごとに表示\n                subTaskInfo.map((subTaskInfo) => context.Log( subTaskInfo.Name + '(' + subTaskInfo.Status + ')：' + subTaskInfo.Time + '(' + subTaskInfo.minute + '分)' ));\n                context.Log('予定工数：' + recordExpectationCost + '分, 実工数：' + recordActualCost + '分, 予実差：' + recordDifferenceCost + '分' );\n                // メインタスクのレコードURLを表示\n                context.Log('レコードURL：https://pleasanter.net/fs/items/' + model.IssueId );\n                context.Log('参考リンク：' + model.ClassC);\n                context.Log('--------------------------------');\n            }\n        }\n        context.UserData.calcTargetPiriod = startCalcDate + '～' + endCalcDate;\n        // 「開始予定」・「完了予定」・「予定工数」・「実工数」・「予実差」項目に値を設定\n        function calculateCost(site) {\n            // 「状況」項目が「完了」以外場合\n            if (site.Status !== 900) {\n                // 「予定工数」項目の値を追加\n                context.UserData.expectationCost += site.NumA;\n                // 「開始予定」項目の値を設定\n                subTaskStartDate = new Date(site.StartTime).getFullYear() + '/' + (new Date(site.StartTime).getMonth() + 1) + '/' + new Date(site.StartTime).getDate() + ' ' + (new Date(site.StartTime).getHours() + 9) + ':' + new Date(site.StartTime).getMinutes() + ':' + new Date(site.StartTime).getSeconds();\n                // 「完了予定」項目の値を設定\n                subTaskEndDate = new Date(site.CompletionTime).getHours() + 9 + ':' + new Date(site.CompletionTime).getMinutes() + ':' + new Date(site.CompletionTime).getSeconds();\n                // 着手予定日時を設定\n                time = subTaskStartDate + '～' + subTaskEndDate;\n                // 「予定工数」項目が0よりも大きい場合\n                if (site.NumA > 0) {\n                    minutes = site.NumA;\n                // 「予定工数」項目が0以下の場合\n                } else {\n                    minutes = 0;\n                }\n                // 子レコードから取得した情報を連想配列として追加\n                subTaskInfo.push({ Name: site.Title, Status: '着手予定', Time: time, minute: minutes, });\n            // 「状況」項目が「完了」の場合\n            } else {\n                // 「予定工数」項目の値を追加\n                context.UserData.actualCost += site.NumB;\n                // 「開始」項目の値を設定\n                subTaskStartDate = new Date(site.DateA).getFullYear() + '/' + (new Date(site.DateA).getMonth() + 1) + '/' + new Date(site.DateA).getDate() + ' ' + (new Date(site.DateA).getHours() + 9) + ':' + new Date(site.DateA).getMinutes() + ':' + new Date(site.DateA).getSeconds();\n                // 「完了」項目の値を設定\n                subTaskEndDate = new Date(site.DateB).getHours() + 9 + ':' + new Date(site.DateB).getMinutes() + ':' + new Date(site.DateB).getSeconds();\n                time = subTaskStartDate + '～' + subTaskEndDate;\n                // 「実工数」項目が0よりも大きい場合\n                if (site.NumB > 0) {\n                    minutes = site.NumB;\n                    // 「実工数」項目が0以下の場合\n                } else {\n                    minutes = 0;\n                }\n                subTaskInfo.push({ Name: site.Title, Status: '完了', Time: time, minute: minutes,\n                });\n            }\n            // 「予定工数」項目の値を追加\n            recordExpectationCost += site.NumA;\n            // 「実工数」項目の値を追加\n            recordActualCost += site.NumB;\n            // 「予実差」項目の値を追加\n            recordDifferenceCost += Number(site.ClassC);\n        }\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}\n",
            "Id": 6
          },
          {
            "Title": "工数集計処理②",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "try {\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる要修正箇所\n    */\n    // 今月の稼働日数を設定する変数を初期化\n    let thisMonthDays = 19;\n\n    /*\n    ロジック内で使用する値初期化箇所\n    ユーザによる修正不要箇所\n   */\n    // 今月の予定工数を計算する変数を初期化\n    let resultExpectationCost;\n    // 今月の実工数を計算する変数を初期化\n    let resultActualCost;\n    // 今月工数を設定する変数を初期化\n    let thisMonthCost;\n    // 一覧画面\n    if (context.ControlId === 'BulkProcessCommand') {\n        context.Log('集計対象期間：' + context.UserData.calcTargetPiriod);\n        context.Log('今月の稼働日数：' + thisMonthDays + '日');\n        thisMonthCost = thisMonthDays * 420;\n        context.Log('今月工数(420分/日)：' + thisMonthCost + '分');\n        resultExpectationCost = (context.UserData.expectationCost / thisMonthCost) * 100;\n        resultActualCost = (context.UserData.actualCost / thisMonthCost) * 100;\n        context.Log( '今月工数：' + Math.round(resultExpectationCost + resultActualCost) / 100 + '人月' );\n    }\n} catch (ex) {\n    context.Log(ex.stack);\n}\n",
            "Id": 7
          }
        ],
        "NoDisplayIfReadOnly": false
      },
      "Publish": false,
      "DisableCrossSearch": false,
      "Comments": []
    }
  ],
  "Data": [],
  "Permissions": [
    {
      "SiteId": 11267690,
      "Permissions": [
        {
          "ReferenceId": 11267690,
          "DeptId": 0,
          "GroupId": 0,
          "UserId": 12454,
          "PermissionType": 511
        },
        {
          "ReferenceId": 11269012,
          "DeptId": 0,
          "GroupId": 0,
          "UserId": 12454,
          "PermissionType": 511
        }
      ]
    },
    {
      "SiteId": 11267727,
      "Permissions": []
    },
    {
      "SiteId": 11267728,
      "Permissions": []
    },
    {
      "SiteId": 11267729,
      "Permissions": []
    },
    {
      "SiteId": 11267730,
      "Permissions": []
    },
    {
      "SiteId": 11269012,
      "Permissions": [
        {
          "ReferenceId": 11269012,
          "DeptId": 0,
          "GroupId": 0,
          "UserId": 12454,
          "PermissionType": 511
        }
      ]
    },
    {
      "SiteId": 11269013,
      "Permissions": [
        {
          "ReferenceId": 11269013,
          "DeptId": 0,
          "GroupId": 0,
          "UserId": 12454,
          "PermissionType": 511
        }
      ]
    },
    {
      "SiteId": 11269014,
      "Permissions": [
        {
          "ReferenceId": 11269014,
          "DeptId": 0,
          "GroupId": 0,
          "UserId": 12454,
          "PermissionType": 511
        }
      ]
    },
    {
      "SiteId": 11269015,
      "Permissions": [
        {
          "ReferenceId": 11269015,
          "DeptId": 0,
          "GroupId": 0,
          "UserId": 12454,
          "PermissionType": 511
        }
      ]
    }
  ],
  "PermissionIdList": {
    "DeptIdList": [],
    "GroupIdList": [],
    "UserIdList": [
      {
        "UserId": 12454,
        "LoginId": "5886e885-28a5-4db9-a67f-9f0756d42019"
      }
    ]
  }
}